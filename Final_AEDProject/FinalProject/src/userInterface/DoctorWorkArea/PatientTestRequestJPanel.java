/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.DoctorWorkArea;

import Business.Account.Account;
import Business.EcoSystem;
import Business.Enterprise.CentralLaboratoryEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.LocalLabOrganization;
import Business.Organization.Organization;
import Business.Organization.RadiologyOrganization;
import Business.Organization.ScreeningOrganization;
import Business.Person.Donor;
import Business.Person.Recipient;
import Business.WorkQueue.LabTestWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Siddhi
 */
public class PatientTestRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    JPanel container;
    Enterprise enterprise;
    private Account account;
    EcoSystem business;
    String patient = null;

    public PatientTestRequestJPanel(JPanel container, Enterprise enterprise, Account account, EcoSystem business) {
        initComponents();
        this.container = container;
        this.enterprise = enterprise;
        this.account = account;
        this.business = business;
        populateDropdown();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        PatientName = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        xray = new javax.swing.JCheckBox();
        radio = new javax.swing.JCheckBox();
        gyna = new javax.swing.JCheckBox();
        resultStatus = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        blood = new javax.swing.JCheckBox();
        cancer = new javax.swing.JCheckBox();
        adviceTest = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Patient");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Tests");

        xray.setBackground(new java.awt.Color(255, 204, 204));
        xray.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        xray.setText("Chest X-Ray and Electrocardiogram (EKG)");

        radio.setBackground(new java.awt.Color(255, 204, 204));
        radio.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        radio.setText("Radiologic Testing");

        gyna.setBackground(new java.awt.Color(255, 204, 204));
        gyna.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        gyna.setText("Gynecological screening");

        resultStatus.setBackground(new java.awt.Color(153, 204, 255));
        resultStatus.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        resultStatus.setText("Test Result Status");
        resultStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        resultStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultStatusActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/Images/IMAGES/down-syndrome-lab-blood-test-results-blog.jpg"))); // NOI18N

        blood.setBackground(new java.awt.Color(255, 204, 204));
        blood.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        blood.setText("Blood Test");

        cancer.setBackground(new java.awt.Color(255, 204, 204));
        cancer.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        cancer.setText("Cancer Screening");

        adviceTest.setBackground(new java.awt.Color(153, 204, 255));
        adviceTest.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        adviceTest.setText("Advice Test");
        adviceTest.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        adviceTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adviceTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(xray, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(radio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(blood, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(gyna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cancer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(475, 475, 475))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(803, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(adviceTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resultStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(153, 153, 153))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(blood)
                            .addComponent(cancer))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radio)
                            .addComponent(gyna))
                        .addGap(27, 27, 27)
                        .addComponent(xray)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(adviceTest, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resultStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(339, 339, 339))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))))
        );
    }// </editor-fold>//GEN-END:initComponents

    void populateDropdown() {
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            //get patients from where they are being stored
            for (Donor d : o.getDonorDirectory().getDonorList()) {
                PatientName.addItem(d.getEmailAdd().trim());
                patient = "donor";
            }
            for (Recipient r : o.getRecipientDirectory().getRecipientList()) {
                PatientName.addItem(r.getEmailAdd().trim());
                patient = "recipient";
            }
        }

    }

    public void clearAll() {
        xray.setSelected(false);
        radio.setSelected(false);
        blood.setSelected(false);
        cancer.setSelected(false);
        gyna.setSelected(false);
    }
    private void resultStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultStatusActionPerformed
        List<String> tests = new ArrayList<>();
        if (blood.isSelected()) {
            tests.add("Yes");
        } else {
            tests.add("No");
        }
        if (radio.isSelected()) {
            tests.add("Yes");
        } else {
            tests.add("No");
        }
        if (xray.isSelected()) {
            tests.add("Yes");
        } else {
            tests.add("No");
        }
        //String patient1 = populateDropdown();
        DoctorActivityJPanel patientTestRequestJPanel = new DoctorActivityJPanel(container, enterprise, account, (String) PatientName.getItemAt(PatientName.getSelectedIndex()), tests, patient);
        container.add("DoctorActivityJPanel", patientTestRequestJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_resultStatusActionPerformed

    private void adviceTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adviceTestActionPerformed
        if (blood.isSelected() == false && xray.isSelected() == false && radio.isSelected() == false && gyna.isSelected() == false && cancer.isSelected() == false) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }
        if (blood.isSelected() || xray.isSelected() || radio.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setMessage("Please perform these tests");
            request.setSender(account);
            request.setStatus("Sent");
            request.setPatientName((String) PatientName.getItemAt(PatientName.getSelectedIndex()));

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {

                if (organization instanceof LocalLabOrganization) {

                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "Tests sent to internal lab department for consultation!");
        }
        if (gyna.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setMessage("Screening Dept - please look into this issue");
            request.setSender(account);
            request.setStatus("Sent");
            request.setPatientName((String) PatientName.getItemAt(PatientName.getSelectedIndex()));
            Organization o = null;
            for (Network n : business.getNetworkList()) {

                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof CentralLaboratoryEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof ScreeningOrganization) {
                                o = org;

                            }
                        }
                    }
                }
            }
            if (o != null) {
                o.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "Tests sent to external lab, Screening Dept for analysis!");
            }
        }
        if (cancer.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setMessage("Radiology Dept - please look into this issue");
            request.setSender(account);
            request.setStatus("Sent");
            request.setPatientName((String) PatientName.getItemAt(PatientName.getSelectedIndex()));
            Organization o = null;
            for (Network n : business.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof CentralLaboratoryEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrganization) {
                                o = org;

                            }
                        }
                    }
                }
            }
            if (o != null) {
                o.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "Tests sent to external lab, Radiology Dept for analysis!");
            }
        }
        clearAll();
    }//GEN-LAST:event_adviceTestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox PatientName;
    private javax.swing.JButton adviceTest;
    private javax.swing.JCheckBox blood;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cancer;
    private javax.swing.JCheckBox gyna;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox radio;
    private javax.swing.JButton resultStatus;
    private javax.swing.JCheckBox xray;
    // End of variables declaration//GEN-END:variables
}
